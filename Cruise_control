#include <stdio.h>
#include "system.h"
#include "includes.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include "sys/alt_alarm.h"
#include "sys/alt_timestamp.h"
#include "alt_types.h"

#define DEBUG 1

#define HW_TIMER_PERIOD 100 /* 100ms */

/* Button Patterns */

#define GAS_PEDAL_FLAG      0x08
#define BRAKE_PEDAL_FLAG    0x04
#define CRUISE_CONTROL_FLAG 0x02
/* Switch Patterns */

#define TOP_GEAR_FLAG       0x00000002
#define ENGINE_FLAG         0x00000001

/* LED Patterns */

#define LED_RED_0 0x00000001 // Engine
#define LED_RED_1 0x00000002 // Top Gear

#define LED_GREEN_0 0x0001 // Cruise Control activated
#define LED_GREEN_2 0x0004 // Cruise Control Button
#define LED_GREEN_4 0x0010 // Brake Pedal
#define LED_GREEN_6 0x0040 // Gas Pedal

/*
 * Definition of Tasks
 */

#define TASK_STACKSIZE 2048

OS_STK StartTask_Stack[TASK_STACKSIZE]; 
OS_STK ControlTask_Stack[TASK_STACKSIZE]; 
OS_STK VehicleTask_Stack[TASK_STACKSIZE];
OS_STK ButtonIO_Stack[TASK_STACKSIZE];
OS_STK SwitchIO_Stack[TASK_STACKSIZE];
OS_STK WatchDog_Stack[TASK_STACKSIZE];
OS_STK OverLoad_Stack[TASK_STACKSIZE];
OS_STK ExtraLoad_Stack[TASK_STACKSIZE];


// Task Priorities


#define STARTTASK_PRIO     5
#define VEHICLETASK_PRIO  10
#define CONTROLTASK_PRIO  12
#define BUTTONIO_PRIO     14
#define SWITCHIO_PRIO     15
#define WATCHDOG_PRIO     16
#define EXTRALOAD_PRIO    17 
#define OVERLOAD_PRIO     18

// Task Periods

#define CONTROL_PERIOD   300
#define VEHICLE_PERIOD   300
#define BUTTONIO_PERIOD  300
#define SWITCHIO_PERIOD  300
#define WATCHDOG_PERIOD  300
#define OVERLOAD_PERIOD  300
#define EXTRALOAD_PERIOD 300

/*
 * Definition of Kernel Objects 
 */

// Mailboxes
OS_EVENT *Mbox_Throttle;
OS_EVENT *Mbox_Velocity;
OS_EVENT *OK_signal;

// Semaphores
OS_EVENT *aSemaphore;
OS_EVENT *bSemaphore;
OS_EVENT *cSemaphore;
OS_EVENT *dSemaphore;
OS_EVENT *eSemaphore;
OS_EVENT *fSemaphore;
OS_EVENT *gSemaphore;

// SW-Timer

OS_TMR *SwTimer1;
OS_TMR *SwTimer2;
OS_TMR *SwTimer3;
OS_TMR *SwTimer4;
OS_TMR *SwTimer5;
OS_TMR *SwTimer6;
OS_TMR *SwTimer7;

//Time Stamp
alt_u32 time1;
alt_u32 time2;
double execution_time;

/*
 * Types
 */
enum active {on, off};

enum active gas_pedal = off;
enum active brake_pedal = off;
enum active top_gear = off;
enum active engine = off;
enum active cruise_control = off; 

/*
 * Global variables
 */
int delay; // Delay of HW-timer 
INT16U led_green = 0; // Green LEDs
INT32U led_red = 0;   // Red LEDs
int target_flag = 0;    //display current velocity
INT8S target_velocity = 0;//target velocity


int buttons_pressed(void)
{
  return ~IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_KEYS4_BASE);    
}

int switches_pressed(void)
{
  return IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_TOGGLES18_BASE);    
}

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context)
{
  OSTmrSignal(); /* Signals a 'tick' to the SW timers */
  
  return delay;
}

static int b2sLUT[] = {0x40, //0
                 0x79, //1
                 0x24, //2
                 0x30, //3
                 0x19, //4
                 0x12, //5
                 0x02, //6
                 0x78, //7
                 0x00, //8
                 0x18, //9
                 0x3F, //-
};

/*
 * convert int to seven segment display format
 */
int int2seven(int inval){
    return b2sLUT[inval];
}

/*
 * output current velocity on the seven segement display
 */
void show_velocity_on_sevenseg(INT8S velocity){
  int tmp = velocity;
  int out;
  INT8U out_high = 0;
  INT8U out_low = 0;
  INT8U out_sign = 0;

  if(velocity < 0){
     out_sign = int2seven(10);
     tmp *= -1;
  }else{
     out_sign = int2seven(0);
  }

  out_high = int2seven(tmp / 10);
  out_low = int2seven(tmp - (tmp/10) * 10);
  
  out = int2seven(0) << 21 |
            out_sign << 14 |
            out_high << 7  |
            out_low;
  IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_LOW28_BASE,out);
}

/*
 * shows the target velocity on the seven segment display (HEX5, HEX4)
 * when the cruise control is activated (0 otherwise)
 */
void show_target_velocity(INT8U target_vel)
{
    int temp = target_vel;
    int out;
    INT8U out_high = 0;
    INT8U out_low = 0;
    
    if(cruise_control == on)
    {
        out_high = int2seven(temp/10);
        out_low = int2seven(temp - (temp/10) * 10);
  
        out = int2seven(0) << 21 |
              int2seven(0) << 14 |
                  out_high << 7  |
                  out_low;
    }
    else
    {
        out = 0;
    }
    
    IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_HIGH28_BASE,out);   
    
}

/*
 * indicates the position of the vehicle on the track with the four leftmost red LEDs
 * LEDR17: [0m, 400m)
 * LEDR16: [400m, 800m)
 * LEDR15: [800m, 1200m)
 * LEDR14: [1200m, 1600m)
 * LEDR13: [1600m, 2000m)
 * LEDR12: [2000m, 2400m]
 */
void show_position(INT16U position)
{
    if (position < 4000)
        led_red = led_red & 0x0003 | 0x20000;
    else if (position < 8000)
            led_red = led_red & 0x0003 | 0x10000 ;
         else if (position < 12000)
                  led_red = led_red & 0x0003 | 0x8000 ;
              else if (position < 16000)
                       led_red = led_red & 0x0003 | 0x4000 ;
                   else if (position < 20000)
                            led_red = led_red & 0x0003 | 0x2000 ;
                        else 
                            led_red = led_red & 0x0003 | 0x1000 ;
    
//    printf("show_position, led_red is : %x \n",led_red);
                            
    IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE, led_red);  
}

/*
 * The function 'adjust_position()' adjusts the position depending on the
 * acceleration and velocity.
 */
 INT16U adjust_position(INT16U position, INT16S velocity,
                        INT8S acceleration, INT16U time_interval)
{
  INT16S new_position = position + velocity * time_interval / 1000
    + acceleration / 2  * (time_interval / 1000) * (time_interval / 1000);

  if (new_position > 24000) {
    new_position -= 24000;
  } else if (new_position < 0){
    new_position += 24000;
  }
  
  show_position(new_position);
  return new_position;
}
 
/*
 * The function 'adjust_velocity()' adjusts the velocity depending on the
 * acceleration.
 */
INT16S adjust_velocity(INT16S velocity, INT8S acceleration,  
		       enum active brake_pedal, INT16U time_interval)
{
  INT16S new_velocity;
  INT8U brake_retardation = 200;

  if (brake_pedal == off)
    new_velocity = velocity  + (float) (acceleration * time_interval) / 1000.0;
  else {
    if (brake_retardation * time_interval / 1000 > velocity)
      new_velocity = 0;
    else
      new_velocity = velocity - brake_retardation * time_interval / 1000;
  }
  
  return new_velocity;
}

/*
 * The task 'VehicleTask' updates the current velocity of the vehicle
 */
void VehicleTask(void* pdata)
{ 
  INT8U err;  
  INT8U err_sem; 
  void* msg;
  INT8U* throttle; 
  INT8S acceleration;  /* Value between 40 and -20 (4.0 m/s^2 and -2.0 m/s^2) */
  INT8S retardation;   /* Value between 20 and -10 (2.0 m/s^2 and -1.0 m/s^2) */
  INT16U position = 0; /* Value between 0 and 20000 (0.0 m and 2000.0 m)  */
  INT16S velocity = 0; /* Value between -200 and 700 (-20.0 m/s amd 70.0 m/s) */
  INT16S wind_factor;   /* Value between -10 and 20 (2.0 m/s^2 and -1.0 m/s^2) */

  printf("Vehicle task created!\n");

  while(1)
    {
      err = OSMboxPost(Mbox_Velocity, (void *) &velocity);

      //OSTimeDlyHMSM(0,0,0,VEHICLE_PERIOD); 
      OSSemPend(aSemaphore, 0, &err_sem);


      /* Non-blocking read of mailbox: 
	   - message in mailbox: update throttle
	   - no message:         use old throttle
      */
      msg = OSMboxPend(Mbox_Throttle, 1, &err); 
      if (err == OS_NO_ERR) 
	     throttle = (INT8U*) msg;

      /* Retardation : Factor of Terrain and Wind Resistance */
      if (velocity > 0)
	     wind_factor = velocity * velocity / 10000 + 1;
      else 
	     wind_factor = (-1) * velocity * velocity / 10000 + 1;
         
      if (position < 4000) 
         retardation = wind_factor; // even ground
      else if (position < 8000)
          retardation = wind_factor + 15; // traveling uphill
        else if (position < 12000)
            retardation = wind_factor + 25; // traveling steep uphill
          else if (position < 16000)
              retardation = wind_factor; // even ground
            else if (position < 20000)
                retardation = wind_factor - 10; //traveling downhill
              else
                  retardation = wind_factor - 5 ; // traveling steep downhill
                  
      acceleration = *throttle / 2 - retardation;	  
      position = adjust_position(position, velocity, acceleration, 300); 
      velocity = adjust_velocity(velocity, acceleration, brake_pedal, 300); 
      printf("Position: %dm\n", position / 10);
      printf("Velocity: %4.1fm/s\n", velocity /10.0);
      printf("Throttle: %dV\n", *throttle / 10);
      show_velocity_on_sevenseg((INT8S) (velocity / 10));
    }
} 
 
/*
 * The task 'ControlTask' is the main task of the application. It reacts
 * on sensors and generates responses.
 */

void ControlTask(void* pdata)
{
  INT8U err;
  INT8U err_sem; 
  INT8U throttle = 0; /* Value between 0 and 80, which is interpreted as between 0.0V and 8.0V */
  void* msg;
  INT16S* current_velocity;
  INT16S  previous_velocity;

  printf("Control Task created!\n");

  while(1)
    {
      msg = OSMboxPend(Mbox_Velocity, 0, &err);
      current_velocity = (INT16S*) msg;
      
      //Engine Control
      if(engine == off)
      //Switch send an engine off signal
      {
        if(*current_velocity != 0)
        {
            //Engine still on till v = 0
            engine = on;
            led_red = led_red|(LED_RED_0);
        }else
        {
            //Engine turned off
            led_red = led_red&(~LED_RED_0);
            throttle = 0;
        }
      }else throttle = 40;
      
      //Cruise Control
      if(cruise_control == on)
      //Key sends a cruise_control on signal
      {
        if (top_gear == on && *current_velocity >= 250 && gas_pedal == off && brake_pedal == off)
        {
            // Cruise Control turns on
//            led_green = led_green|(LED_GREEN_2);
            led_green = led_green|(LED_GREEN_0);
            if(target_flag == 1)
            {
                target_velocity = *current_velocity /10;
                show_target_velocity(target_velocity);
                target_flag = 0;
            }else target_flag = 0;  
            
            if(*current_velocity/10 <= target_velocity - 2)
            {
                //show_target_velocity
                throttle = 80;
                if (DEBUG)
                {
                    printf("Target : %d\n", target_velocity);
                }
            }else if(*current_velocity/10 > target_velocity + 2 )
            {    
                 throttle = 0;
                if (DEBUG)
                {
                    printf("Target : %d\n", target_velocity);
                }   
            }
            
        }else
        {
            //Cruise Control turned off
            cruise_control = off;
            show_target_velocity(0);
            led_green = led_green&(~LED_GREEN_2);
            led_green = led_green&(~LED_GREEN_0);
        } 
        
        previous_velocity = *current_velocity;
      }
      
      //Gas pedal Control
      if(gas_pedal == on)
      //key sends gas_pedal on singal
      {
        //Accelerate
        if(engine == off)
        {
            gas_pedal = off;
        }else
        throttle = 80;     
      }

      
      // Brake pedal Control - VehicleTask
      
      // Top gear Control

      
//      printf("Control task, led_green is : %x \n", led_green);
//      printf("Control task, led_red is : %x \n", led_red);
      
      IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE, led_green);
      IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE, led_red);
      
      err = OSMboxPost(Mbox_Throttle, (void *) &throttle);

      //OSTimeDlyHMSM(0,0,0, CONTROL_PERIOD);
      OSSemPend(bSemaphore, 0, &err_sem);
    }
}

//Callback of SwTime

void SwTimer1Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(aSemaphore);
}

void SwTimer2Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(bSemaphore);
}

void SwTimer3Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(cSemaphore);
}

void SwTimer4Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(dSemaphore);
}

void SwTimer5Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(eSemaphore);
}

void SwTimer6Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(fSemaphore);
}

void SwTimer7Callback(void *ptmr, void *callback_arg)
{
    INT8U err;
    err = OSSemPost(gSemaphore);
}

/*
 * task ButtonIO creates the signals CRUISE_CONTROL,
 * GAS_PEDAL AND BREAKE_PEDAL
 *  
 */
 void ButtonIO(void* pdata)
 {
    int temp;
    INT8U err;
    static int last_buttons = -1;
    
    printf("ButtonIO Task created!\n");
    
    
    while(1)
    {            
        
        OSSemPend(cSemaphore,0,&err);
        
        temp = buttons_pressed();
        
        if(last_buttons != temp){
            
            last_buttons = temp;
            
            if((temp&CRUISE_CONTROL_FLAG)==CRUISE_CONTROL_FLAG)
            {
                if(cruise_control == on){
                    cruise_control = off;
                    led_green = led_green&(~LED_GREEN_2);
                    led_green = led_green&(~LED_GREEN_0);
                    show_target_velocity(0);
                    
                }else{
                    cruise_control = on;
                    target_flag = 1;
                    led_green = led_green|LED_GREEN_2;
                }       
            }else
            {
                target_flag = 0;           
            } 
            
            if((temp&BRAKE_PEDAL_FLAG)==BRAKE_PEDAL_FLAG)
            {
                if(brake_pedal == off){
                    
                    brake_pedal = on;
                    led_green = led_green|LED_GREEN_4;  
                }else{
                    brake_pedal = off;
                    led_green = led_green&(~LED_GREEN_4); 
                }
            }
            
            if((temp&GAS_PEDAL_FLAG)==GAS_PEDAL_FLAG)
            {
                if(gas_pedal == off){
               
                    gas_pedal = on;
                    led_green = led_green|LED_GREEN_6;
                }else{
                    gas_pedal = off;
                    led_green = led_green&(~LED_GREEN_6);
                }
            }
            
            
//            printf("Here in button, led_green is : %x \n",led_green);
//            IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE, led_green); 
        }                
    }
 }
 
//task SwitchIO creates the signals ENGINE and TOP_GEAR
 
void SwitchIO(void* pdata)
{
     int temp;
     INT8U err;
        
     printf("SwitchIO Task created!\n");
    
    while(1)
    {
               
        OSSemPend(dSemaphore, 0, &err);
        
        temp = switches_pressed();
        
        if((temp&ENGINE_FLAG)==ENGINE_FLAG)
        {
            engine = on;
//            led_red = led_red|LED_RED_0;        
        }
        else
        {
            engine = off;
//            led_red = led_red&(~LED_RED_0);
        }
        if((temp&TOP_GEAR_FLAG)==TOP_GEAR_FLAG)
        {
            top_gear = on;
            led_red = led_red|LED_RED_1;        
        }
        else
        {
            top_gear = off;
            led_red = led_red&(~LED_RED_1);
        }
//        printf("Here in switch, led_red is : %x \n",led_red);
        
        IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_TOGGLES18_BASE, led_red);
        
    }

}

/*
 * the watchDog task shall issue an overload warning message 
 * if not receive the signal during a spicified interval
 */

void watchDog(void* pdata)
{
    void *msg;
    INT8U err;
    INT16S* receive;
    
    printf("watchDog Task created!\n");
    
    while(1)
    {
//        printf("watchDog Task still working!!!!!!!!\n");
        
        msg = OSMboxPend(OK_signal, 1, &err);
        receive = (INT16S *)msg;
  
        if(*receive == 1)
        {
            printf("It's ok!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
        }
        else
        {            
            printf("----------------Warning-----------------------\n");
        }
        OSSemPend(eSemaphore, 0, &err);     
    }
}

/*
 * the overloadDetection task shall report to the watchdog 
 * with an 'OK' signal
 * */
void overLoad(void* pdata)
{
    INT8U err;
    INT16S ok = 1;
    
    printf("overLoad Task created!\n");  
     
    while(1)
    {
//        printf("overLoad Task still working!!!!!!!!!!!!!!!!!!!\n"); 
        err = OSMboxPost(OK_signal, (void *) &ok);
        OSSemPend(fSemaphore, 0, &err);
    }
}

/*
 * the task extraLoad is possible to dynamically adjust the amount 
 * of processing time that the task uitlizes
 * */

void extraLoad(void* pdata)
{
    int i = 0;
    int j = 0;
    int x;
    int utilization;
    
    INT8U err;
    
    printf("extraLoad Task created!\n");  
    
    while(1)
    {
        // Extra Load Task Start Timestamp
        if(alt_timestamp_start() < 0)
        {
            printf("No timestamp device available. \n");
        }
        else
        {
            time1 = alt_timestamp();
        }
        
        utilization = (switches_pressed() & 0x03f0) >> 4;
        
        if (utilization > 50)
            utilization = 50;
            
        printf("Utilization is %d %\n", utilization * 2);
        
        for (i = 0; i < utilization * 2; i++)
        {
            for (j = 0; j < 1200; j++)
            {
                x=j;
            }
        }
        time2 = alt_timestamp();
        execution_time = (double)(time2-time1)/(double)alt_timestamp_freq()*1000;
        
        printf("Extra Load Task Execution Time is : %.4f ms.\n", execution_time);
        
        OSSemPend(gSemaphore, 0, &err);
    }
}


/* 
 * The task 'StartTask' creates all other tasks kernel objects and
 * deletes itself afterwards.
 */ 

void StartTask(void* pdata)
{
  INT8U err;
  void* context;

  static alt_alarm alarm;     /* Is needed for timer ISR function */
  
  /* Base resolution for SW timer : HW_TIMER_PERIOD ms */
  delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000; 
  printf("delay in ticks %d\n", delay);

  /* 
   * Create Hardware Timer with a period of 'delay' 
   */
  if (alt_alarm_start (&alarm,
      delay,
      alarm_handler,
      context) < 0)
      {
          printf("No system clock available!n");
      }

  /* 
   * Create and start Software Timer 
   */
  SwTimer1 = OSTmrCreate(0, 
                        VEHICLE_PERIOD/100, //PERIOD UNIT IS 100MS
                        OS_TMR_OPT_PERIODIC,
                        SwTimer1Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer1, &err))
  {
    printf("VEHICLE Timer1 start!\n");
  }
  
  SwTimer2 = OSTmrCreate(0, 
                        CONTROL_PERIOD/100,
                        OS_TMR_OPT_PERIODIC,
                        SwTimer2Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer2, &err))
  {
    printf("CONTROL Timer2 start!\n");
  }
  
  SwTimer3 = OSTmrCreate(0, 
                        BUTTONIO_PERIOD/100, 
                        OS_TMR_OPT_PERIODIC,
                        SwTimer3Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer3, &err))
  {
    printf("BUTTONIO Timer3 start!\n");
  }
  SwTimer4 = OSTmrCreate(0, 
                        SWITCHIO_PERIOD/100, //PERIOD UNIT IS 100MS
                        OS_TMR_OPT_PERIODIC,
                        SwTimer4Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer4, &err))
  {
    printf("SWITCHIO Timer4 start!\n");
  }
  SwTimer5 = OSTmrCreate(0, 
                        WATCHDOG_PERIOD/100, //PERIOD UNIT IS 100MS
                        OS_TMR_OPT_PERIODIC,
                        SwTimer5Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer5, &err))
  {
    printf("WATCHDOG Timer5 start!\n");
  }
  SwTimer6 = OSTmrCreate(0, 
                        OVERLOAD_PERIOD/100, //PERIOD UNIT IS 100MS
                        OS_TMR_OPT_PERIODIC,
                        SwTimer6Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer6, &err))
  {
    printf("OVERLOAD Timer6 start!\n");
  }
  
  SwTimer7 = OSTmrCreate(0, 
                        EXTRALOAD_PERIOD/100, //PERIOD UNIT IS 100MS
                        OS_TMR_OPT_PERIODIC,
                        SwTimer7Callback,
                        (void *)0,
                        "Software Timer",
                        &err);
  if(OSTmrStart(SwTimer7, &err))
  {
    printf("EXTRALOAD Timer7 start!\n");
  }
                        
  /*
   * Creation of Kernel Objects
   */
  
  // Mailboxes
  Mbox_Throttle = OSMboxCreate((void*) 0); /* Empty Mailbox - Throttle */
  Mbox_Velocity = OSMboxCreate((void*) 0); /* Empty Mailbox - Velocity */
  OK_signal = OSMboxCreate((void*) 0);//Empty Mailbox - Ok signal
  
  //Semaphores
  aSemaphore = OSSemCreate(0);
  bSemaphore = OSSemCreate(1);
  cSemaphore = OSSemCreate(1);
  dSemaphore = OSSemCreate(1);
  eSemaphore = OSSemCreate(1);
  fSemaphore = OSSemCreate(1);
  gSemaphore = OSSemCreate(1);
  
  /*
   * Create statistics task
   */

  OSStatInit();

  /* 
   * Creating Tasks in the system 
   */


  err = OSTaskCreateExt(
	   ControlTask, // Pointer to task code
	   NULL,        // Pointer to argument that is
	                // passed to task
	   &ControlTask_Stack[TASK_STACKSIZE-1], // Pointer to top
							 // of task stack
	   CONTROLTASK_PRIO,
	   CONTROLTASK_PRIO,
	   (void *)&ControlTask_Stack[0],
	   TASK_STACKSIZE,
	   (void *) 0,
	   OS_TASK_OPT_STK_CHK);

  err = OSTaskCreateExt(
	   VehicleTask, // Pointer to task code
	   NULL,        // Pointer to argument that is
	                // passed to task
	   &VehicleTask_Stack[TASK_STACKSIZE-1], // Pointer to top
							 // of task stack
	   VEHICLETASK_PRIO,
	   VEHICLETASK_PRIO,
	   (void *)&VehicleTask_Stack[0],
	   TASK_STACKSIZE,
	   (void *) 0,
	   OS_TASK_OPT_STK_CHK);
   
  err = OSTaskCreateExt(
       ButtonIO, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &ButtonIO_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       BUTTONIO_PRIO,
       BUTTONIO_PRIO,
       (void *)&ButtonIO_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);
         
  err = OSTaskCreateExt(
       SwitchIO, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &SwitchIO_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       SWITCHIO_PRIO,
       SWITCHIO_PRIO,
       (void *)&SwitchIO_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);
  err = OSTaskCreateExt(
       watchDog, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &WatchDog_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       WATCHDOG_PRIO,
       WATCHDOG_PRIO,
       (void *)&WatchDog_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);
  err = OSTaskCreateExt(
       overLoad, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &OverLoad_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       OVERLOAD_PRIO,
       OVERLOAD_PRIO,
       (void *)&OverLoad_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);
  err = OSTaskCreateExt(
       extraLoad, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &ExtraLoad_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       EXTRALOAD_PRIO,
       EXTRALOAD_PRIO,
       (void *)&ExtraLoad_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);  
       
  
  printf("All Tasks and Kernel Objects generated!\n");

  /* Task deletes itself */

  OSTaskDel(OS_PRIO_SELF);
}

/*
 *
 * The function 'main' creates only a single task 'StartTask' and starts
 * the OS. All other tasks are started from the task 'StartTask'.
 *
 */

int main(void) {

  printf("Lab: Cruise Control\n");
  IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE, led_red);
  IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE, led_green);
  IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_LOW28_BASE,target_velocity);
  IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_HIGH28_BASE,target_velocity);
  
  OSTaskCreateExt(
	 StartTask, // Pointer to task code
         NULL,      // Pointer to argument that is
                    // passed to task
         (void *)&StartTask_Stack[TASK_STACKSIZE-1], // Pointer to top
						     // of task stack 
         STARTTASK_PRIO,
         STARTTASK_PRIO,
         (void *)&StartTask_Stack[0],
         TASK_STACKSIZE,
         (void *) 0,  
         OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
         
  OSStart();
  
  return 0;
}
